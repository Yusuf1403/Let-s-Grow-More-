# -*- coding: utf-8 -*-
"""Decission-tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14O5dGyu2rWMteLdnruK7UTpdjW2u7nqd

Name:- **Yusuf-Harun-Shaikh**


**Predicition using Decision Tree Algorithum**
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import tensorflow as tf
from tensorflow import keras
import numpy as np
import pandas as pd

np.random.seed(0)
import random


import tensorflow.keras as keras
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense,Dropout,Flatten
from tensorflow.keras.layers import Conv2D,MaxPool2D,BatchNormalization
from tensorflow.keras import backend as keras
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import mnist
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau,ModelCheckpoint
from keras.models import model_from_json


from keras.utils.vis_utils import plot_model


from sklearn.model_selection import train_test_split
from sklearn.model_selection import validation_curve
from sklearn.model_selection import learning_curve
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier



import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import scipy as sp
import warnings
warnings.filterwarnings("ignore")
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree

iris_data= pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data")
iris_data

columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'Species']

iris_data.columns = columns
iris_data.head()

iris_data.tail()

iris_data.shape

iris_data.info()

iris_data.describe()

iris_data.value_counts()

iris_data.isnull().sum()

iris_data.dtypes

sns.pairplot(iris_data.iloc[:,1:])

iris_data.hist()

fig = plt.figure(figsize=(10, 5))
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
colors=['green','blue','red']
sp=iris_data['Species'].unique()
ct=iris_data['Species'].value_counts().tolist()
ax.pie(ct, labels = sp, autopct='%1.2f%%', colors=colors, startangle=90)
plt.title('Precentage of different species in the Datase')
plt.show()

iris_data.skew()

dupes = iris_data.duplicated()
dupes

iris_data.boxplot(column='petal_length')

iris_data.quantile(0.75)-iris_data.quantile(0.25)

sns.stripplot(x='Species', y='sepal_length', data=iris_data, palette='crest')
plt.title('Species vs Petal Length')

sns.stripplot(x='Species', y='sepal_width', data=iris_data, palette='crest')
plt.title('Species vs Petal Width')

sns.pairplot(iris_data, hue = 'Species', palette='viridis')
plt.show()

sns.pairplot(iris_data, hue= 'Species', palette='viridis', diag_kind='reg')

sns.pairplot(iris_data, hue ='Species', palette='magma', diag_kind='kde')

sns.pairplot(iris_data, hue='Species', palette='rocket_r', diag_kind='hist')

sns.pairplot(iris_data , hue='Species', palette='crest', diag_kind='scatter')

matrix = iris_data.corr()
corMat = sns.heatmap(matrix, annot=True)
corMat.set_title("Feature Correlation Matrix")
plt.show()

x = iris_data.drop('Species', axis=1)
y = iris_data['Species']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.30, random_state=1)

from sklearn.tree import DecisionTreeClassifier
model= DecisionTreeClassifier(criterion='gini', random_state=1)
model.fit(x_train, y_train)

print(model.score(x_test,y_test))

y_pred = model.predict(x_test)
print(y_pred)

sc = DecisionTreeClassifier(criterion='entropy', random_state=20)
sc.fit(x_train, y_train)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
y_pred1 = sc.predict(x_test)
predicated1=y_pred1
actual=y_test
score_lr=accuracy_score(y_test,y_pred1)
print("Accuracy is:", score_lr)
print("Recall:{}".format(metrics.recall_score(y_test,y_pred1,average='macro')))
print("Precision:{}".format(metrics.precision_score(y_test, y_pred1,average='macro')))
results=confusion_matrix(actual,predicated1)
print('confusion matrix:\n', results)

print('Classification Report:')
print(metrics.classification_report(y_test,y_pred1))

feature_names = iris_data.columns[:4]
target_names = iris_data['Species'].unique().tolist()
arget_names=['0','1','2']
feature_names

features = iris_data.columns[:-1]
classes = iris_data['Species'].unique().tolist()
from sklearn.tree import plot_tree
plt.figure(figsize=(15,15))
plot_tree(sc, feature_names = features, class_names = classes, filled=True)
plt.show

