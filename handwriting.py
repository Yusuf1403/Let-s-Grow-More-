# -*- coding: utf-8 -*-
"""HandWriting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hbs0vzoT8KhlU1z1-SA5NIMH2tZvtNH9

Name:-**Yusuf-Harun-Shaikh**



**Develop A Neural Network That Can Read Your HandWriting**
"""

import tensorflow
import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten,Conv2D,MaxPooling2D

mnist = tensorflow.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train.shape

plt.imshow(x_train[0])
plt.show
plt.imshow(x_train[0], cmap= plt.cm.binary)

x_train = tensorflow.keras.utils.normalize(x_train, axis=1)
x_test = tensorflow.keras.utils.normalize(x_test, axis=1)
plt.imshow(x_train[0], cmap = plt.cm.binary)

x_train = np.array(x_train).reshape(-1,28,28,1)
x_test = np.array(x_test).reshape(-1,28,28,1)
print("Train set dimension:", x_train.shape)
print("Test set dimension:", x_test.shape)

model = Sequential()



model.add(Conv2D(64,(3,3), input_shape = x_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))

model.add(Dense(32))
model.add(Activation('relu'))

model.add(Dense(10))
model.add(Activation('softmax'))

model.summary()

len(x_train)

model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5 , validation_split=0.3, batch_size=1)

test_loss, test_acc = model.evaluate(x_test, y_test)
print("The accuracy on samples:", test_acc)
print("The accuracy on samples:", test_loss)

import skimage
import random
from random import randint
img = cv2.imread('1.jpg')
plt.imshow(img)
plt.show()

img.shape

img = cv2.resize((cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)),(28,28), interpolation=cv2.INTER_AREA)

img.shape

img = tensorflow.keras.utils.normalize(img, axis=1)

img = np.array(img).reshape(-1,28,28,1)

img.shape

print("Number predicated ==>")
print(np.argmax(model.predict(img)))